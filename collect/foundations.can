Void = r:* → r

Unit = r:* → a:r → r
id = r:* ⇒ a:r ⇒ r ~
	a

const = t:* ⇒ s:* ⇒ a:t ⇒ b:s ⇒ t ~
	a
drop = t:* ⇒ s:* ⇒ a:t ⇒ b:s ⇒ s ~
	b
flip = t:* ⇒ s:* ⇒ r:* ⇒ f:(t→s→r) ⇒ b:s ⇒ a:t ⇒ r ~
	f a b
$ = t:* ⇒ r:* ⇒ f:(t→r) ⇒ a:t ⇒ r ~
	f a
. = t:* ⇒ s:* ⇒ r:* ⇒ f:(s→r) ⇒ g:(t→s) ⇒ a:t ⇒ r ~
	f (g a)

Boolean = r:* → true:r → false:r → r
True = r:* ⇒ true:r ⇒ false:r ⇒ r ~
	true
False = r:* ⇒ true:r ⇒ false:r ⇒ r ~
	false

not = x:Boolean ⇒ Boolean ~
	x Boolean False True
and = x:Boolean ⇒ y:Boolean ⇒ Boolean ~
	x Boolean y False
or = x:Boolean ⇒ y:Boolean ⇒ Boolean ~
	x Boolean True y
xor = x:Boolean ⇒ y:Boolean ⇒ Boolean ~
	x Boolean (not y) y

Eq = t:* ⇒ x:t → y:t → Unit → Boolean

eqBoolean = Eq Boolean ~
	x:Boolean ⇒ y:Boolean ⇒ Unit ⇒ Boolean ~
	x Boolean y (not y)

is = t:* ⇒ eqT:Eq t ⇒ x:t ⇒ y:t ⇒ * ~
	eqT x y id * Unit Void
isNot = t:* ⇒ eqT:Eq t ⇒ x:t ⇒ y:t ⇒ * ~
	eqT x y id * Void Unit

Ordering = r:* → lt:r → eq:r → gt:r → r
LT = r:* ⇒ lt:r ⇒ eq:r ⇒ gt:r ⇒ r ~
	lt
EQ = r:* ⇒ lt:r ⇒ eq:r ⇒ gt:r ⇒ r ~
	eq
GT = r:* ⇒ lt:r ⇒ eq:r ⇒ gt:r ⇒ r ~
	gt

chainOrder = x:Ordering ⇒ y:Ordering ⇒ Ordering ~
	x Ordering LT y GT

eqOrdering = Eq Ordering ~
	x:Ordering ⇒ y:Ordering ⇒ Unit ⇒ Boolean ~
	x Boolean (y Boolean True False False) (y Boolean False True False) (y Boolean False False True)

Ord = t:* ⇒ x:t → y:t → Unit → Ordering

ordBoolean = Ord Boolean ~
	x:Boolean ⇒ y:Boolean ⇒ Unit ⇒ Ordering ~
	x Ordering (y Ordering EQ GT) (y Ordering LT EQ)

ordOrdering = Ord Ordering ~
	x:Ordering ⇒ y:Ordering ⇒ Unit ⇒ Ordering ~
	x Ordering (y Ordering EQ GT GT) y (y Ordering LT LT EQ)

eqOrd = t:* ⇒ ordT:Ord t ⇒ Eq t ~
	x:t ⇒ y:t ⇒ Unit ⇒ Boolean ~
	(ordT x y id) Boolean False True False

≥ = t:* ⇒ ordT:Ord t ⇒ x:t ⇒ y:t ⇒ Boolean ~
	ordT x y id Boolean False False True
> = t:* ⇒ ordT:Ord t ⇒ x:t ⇒ y:t ⇒ Boolean ~
	ordT x y id Boolean False False True
< = t:* ⇒ ordT:Ord t ⇒ x:t ⇒ y:t ⇒ Boolean ~
	ordT x y id Boolean True False False
≤ = t:* ⇒ ordT:Ord t ⇒ x:t ⇒ y:t ⇒ Boolean ~
	ordT x y id Boolean True False False

Map = u:(*→*) ⇒ t:* → s:* → f:(t→s) → a:u t → Unit → u s
Replace = u:(*→*) ⇒ t:* → s:* → b:s → a:u t → Unit → u s
Filter = u:(*→*) ⇒ t:* → pred:(x:t→Boolean) → a:u t → Unit → u t

mapReplace = u:(*→*) ⇒ mapU:(Map u) ⇒ Replace u ~
	t:* ⇒ s:* ⇒ b:s ⇒ a:u t ⇒ Unit ⇒ u s ~
	mapU t s (t⇒b) a id

Maybe = t:* ⇒ r:* → nothing:r → just:(a:t→r) → r
Nothing = t:* ⇒ r:* ⇒ nothing:r ⇒ just:(a:t→r) ⇒ r ~
	nothing
Just = t:* ⇒ a:t ⇒ r:* ⇒ nothing:r ⇒ just:(a:t→r) ⇒ r ~
	just a

fromMaybe = t:* ⇒ nothing:t ⇒ may:Maybe t ⇒ t ~
	may t nothing (a:t ⇒ a)

ordMaybe = t:* ⇒ ord:Ord t ⇒ Ord (Maybe t) ~
	x:Maybe t ⇒ y:Maybe t ⇒ Unit ⇒ Ordering ~
	x Ordering (y Ordering EQ (t ⇒ LT)) (x':t ⇒ y Ordering GT (y':t ⇒ ord x' y' id))
eqMaybe = t:* ⇒ eq:Eq t ⇒ Eq (Maybe t) ~
	x:Maybe t ⇒ y:Maybe t ⇒ Unit ⇒ Boolean ~
	x Boolean (y Boolean True (t ⇒ False)) (x':t ⇒ y Boolean False (y':t ⇒ eq x' y' id))
mapMaybe = Map Maybe ~
	t:* ⇒ s:* ⇒ f:(t→s) ⇒ ma:Maybe t ⇒ Unit ⇒ Maybe s ~
	ma (Maybe s) (Nothing s) (a:t ⇒ Just s (f a))

Pair = t:* ⇒ s:* ⇒ r:* → p:(t→s→r) → r
P = t:* ⇒ s:* ⇒ a:t ⇒ b:s ⇒ r:* ⇒ p:(t→s→r) ⇒ r ~
	p a b

fst = t:* ⇒ s:* ⇒ pair:Pair t s ⇒ t ~
	pair t (a:t ⇒ b:s ⇒ a)
snd = t:* ⇒ s:* ⇒ pair:Pair t s ⇒ s ~
	pair s (a:t ⇒ b:s ⇒ b)
swap = t:* ⇒ s:* ⇒ pair:Pair t s ⇒ Pair s t ~
	pair (Pair s t) (a:t ⇒ b:s ⇒ P s t b a)

eqPair = t:* ⇒ s: * ⇒ eqT:Eq t ⇒ eqS:Eq s ⇒ Eq (Pair t s) ~
	x:Pair t s ⇒ y:Pair t s ⇒ Unit ⇒ Boolean ~
	x Boolean (xa:t ⇒ xb:s ⇒ y Boolean (ya:t ⇒ yb:s ⇒ and (eqT xa ya id) (eqS xb yb id)))
ordPair = t:* ⇒ s: * ⇒ ordT:Ord t ⇒ ordS:Ord s ⇒ Ord (Pair t s) ~
	x:Pair t s ⇒ y:Pair t s ⇒ Unit ⇒ Ordering ~
	x Ordering (xa:t ⇒ xb:s ⇒ y Ordering (ya:t ⇒ yb:s ⇒ chainOrder (ordT xa ya id) (ordS xb yb id)))

Either = t:* ⇒ s:* ⇒ r:* → left:(a:t→r) → right:(b:s→r) → r
Left = t:* ⇒ s:* ⇒ a:t ⇒ r:* ⇒ left:(a:t→r) ⇒ right:(b:s→r) ⇒ r ~
	left a
Right = t:* ⇒ s:* ⇒ b:s ⇒ r:* ⇒ left:(a:t→r) ⇒ right:(b:s→r) ⇒ r ~
	right b

eqEither = t:* ⇒ s:* ⇒ eqT:Eq t ⇒ eqS:Eq s ⇒ Eq (Either t s) ~
	x:Either t s ⇒ y:Either t s ⇒ Unit ⇒ Boolean ~
	x Boolean (xa:t ⇒ y Boolean (ya:t ⇒ eqT xa ya id) (yb:s ⇒ False))
	          (xb:s ⇒ y Boolean (ya:t ⇒ False) (yb:s ⇒ eqS xb yb id))
mapLeft = s:* ⇒ Map (t:* ⇒ Either t s) ~
	t:* ⇒ r:* ⇒ f:(t→r) ⇒ a:Either t s ⇒ Unit ⇒ Either r s ~
	a (Either r s) (at:t ⇒ Left r s (f at)) (bs:s ⇒ Right r s bs)
mapRight = t:* ⇒ Map (Either t) ~
	s:* ⇒ r:* ⇒ f:(s→r) ⇒ a:Either t s ⇒ Unit ⇒ Either t r ~
	a (Either t r) (at:t ⇒ Left t r at) (bs:s ⇒ Right t r (f bs))

Nat = r:* → z:r → s:(p:r→r) → r
Z = r:* ⇒ z:r ⇒ s:(p:r→r) ⇒ r ~
	z
S = p:Nat ⇒ r:* ⇒ z:r ⇒ s:(p:r→r) ⇒ r ~
	s (p r z s)

precNat = x:Nat ⇒ Maybe Nat ~
	x (Maybe Nat) (Nothing Nat) (m:Maybe Nat ⇒ m (Maybe Nat) (Just Nat Z) (n:Nat ⇒ Just Nat (S n)))
precNatZ = x:Nat ⇒ Nat ~
	(precNat x) Nat Z (id Nat)
addNat = x:Nat ⇒ y:Nat ⇒ Nat ~
	x Nat y S
mulNat = x:Nat ⇒ y:Nat ⇒ Nat ~
	x Nat Z (addNat y)

Natural = r:* → zero:r → succ:(n:Natural→r) → r
Zero = r:* ⇒ zero:r ⇒ succ:(n:Natural→r) ⇒ zero
Succ = n:Natural ⇒ r:* ⇒ zero:r ⇒ succ:(n:Natural→r) ⇒ succ n

1 = Succ Zero
2 = Succ 1
3 = Succ 2
4 = Succ 3
5 = Succ 4
6 = Succ 5
7 = Succ 6
8 = Succ 7
9 = Succ 8

precNatural = n:Natural ⇒ Maybe Natural ~
	n (Maybe Natural) (Nothing Natural) (Just Natural)
precNaturalZ = x:Natural ⇒ Natural ~
	x Natural Zero (id Natural)
addNatural = n:Natural ⇒ m:Natural ⇒ Natural ~
	m Natural n (addNatural (Succ n))
mulNatural = n:Natural ⇒ m:Natural ⇒ Natural ~
	n Natural Zero (prec:Natural ⇒ addNatural m (mulNatural prec m))
evenNatural = n:Natural ⇒ Boolean ~
	n Boolean True (prec:Natural ⇒ not (evenNatural prec))

eqNatural = Eq Natural ~
	x:Natural ⇒ y:Natural ⇒ Unit ⇒ Boolean ~
	x Boolean (y Boolean True (Natural ⇒ False))
            (x':Natural ⇒ y Boolean False (y':Natural ⇒ eqNatural x' y' id))
ordNatural = Ord Natural ~
	x:Natural ⇒ y:Natural ⇒ Unit ⇒ Ordering ~
	x Ordering (y Ordering EQ (Natural ⇒ LT))
            (x':Natural ⇒ y Ordering GT (y':Natural ⇒ ordNatural x' y' id))

Crumb = Pair Boolean Boolean
crumb = x:Boolean ⇒ y:Boolean ⇒ P Boolean Boolean x y
0c = crumb False False
1c = crumb False True
2c = crumb True False
3c = crumb True True

Nybble = Pair Crumb Crumb
nybble = x:Crumb ⇒ y:Crumb ⇒ P Crumb Crumb x y
$0 = nybble 0c 0c
$1 = nybble 0c 1c
$2 = nybble 0c 2c
$3 = nybble 0c 3c
$4 = nybble 1c 0c
$5 = nybble 1c 1c
$6 = nybble 1c 2c
$7 = nybble 1c 3c
$8 = nybble 2c 0c
$9 = nybble 2c 1c
$a = nybble 2c 2c
$b = nybble 2c 3c
$c = nybble 3c 0c
$d = nybble 3c 1c
$e = nybble 3c 2c
$f = nybble 3c 3c

Byte = Pair Nybble Nybble
byte = x:Nybble ⇒ y:Nybble ⇒ P Nybble Nybble x y
0b = byte $0 $0
1b = byte $0 $1

Playte = Pair Byte Byte
playte = x:Byte ⇒ y:Byte ⇒ P Byte Byte x y
0p = playte 0b 0b
1p = playte 0b 1b

Dynner = Pair Playte Playte
dynner = x:Playte ⇒ y:Playte ⇒ P Playte Playte x y
0d = dynner 0p 0p
1d = dynner 0p 1p

addBoolean = x:Boolean ⇒ y:Boolean ⇒ z:Boolean ⇒ Pair Boolean Boolean ~
	x (Pair Boolean Boolean)
		(y (Pair Boolean Boolean)
			(z (Pair Boolean Boolean)
				(P Boolean Boolean False False)
				(P Boolean Boolean False True))
			(z (Pair Boolean Boolean)
				(P Boolean Boolean False True)
				(P Boolean Boolean True False)))
		(y (Pair Boolean Boolean)
			(z (Pair Boolean Boolean)
				(P Boolean Boolean False True)
				(P Boolean Boolean True False))
			(z (Pair Boolean Boolean)
				(P Boolean Boolean True False)
				(P Boolean Boolean True True)))

addBits = t:* ⇒ addT:(x:t→y:t→z:Boolean→Pair Boolean t) ⇒ x:Pair t t ⇒ y:Pair t t ⇒ z:Boolean ⇒ Pair Boolean (Pair t t) ~
	x (Pair Boolean (Pair t t)) (
		xx:t ⇒ xy:t ⇒ y (Pair Boolean (Pair t t)) (
			yx:t ⇒ yy:t ⇒ (addT xy yy False) (Pair Boolean (Pair t t)) (
				carry:Boolean ⇒ right:t ⇒ (addT xx yx carry) (Pair Boolean (Pair t t)) (
					carryOut:Boolean ⇒ left:t ⇒ P Boolean (Pair t t) carryOut (P t t left right)
				)
			)
		)
	)

addCrumb = addBits Boolean addBoolean

addNybble = addBits Crumb addCrumb

addByte = addBits Nybble addNybble

addPlayte = addBits Byte addByte

addDynner = addBits Playte addPlayte

addModPlayte = x:Playte ⇒ y:Playte ⇒ Playte ~
	snd Boolean Playte (addPlayte x y False)

orBits = t:* ⇒ orT:(x:t → y:t → t) ⇒ x:Pair t t ⇒ y:Pair t t ⇒ Pair t t ~
	x (Pair t t) (xx:t ⇒ xy:t ⇒ y (Pair t t) (yx:t ⇒ yy:t ⇒ P t t (orT xx yx) (orT xy yy)))
orCrumb = orBits Boolean or
orNybble = orBits Crumb orCrumb
orByte = orBits Nybble orNybble
orPlayte = orBits Byte orByte
orDynner = orBits Playte orPlayte

xorBits = t:* ⇒ xorT:(x:t → y:t → t) ⇒ x:Pair t t ⇒ y:Pair t t ⇒ Pair t t ~
	x (Pair t t) (xx:t ⇒ xy:t ⇒ y (Pair t t) (yx:t ⇒ yy:t ⇒ P t t (xorT xx yx) (xorT xy yy)))
xorCrumb = xorBits Boolean xor
xorNybble = xorBits Crumb xorCrumb
xorByte = xorBits Nybble xorNybble
xorPlayte = xorBits Byte xorByte
xorDynner = xorBits Playte xorPlayte

andBits = t:* ⇒ andT:(x:t → y:t → t) ⇒ x:Pair t t ⇒ y:Pair t t ⇒ Pair t t ~
	x (Pair t t) (xx:t ⇒ xy:t ⇒ y (Pair t t) (yx:t ⇒ yy:t ⇒ P t t (andT xx yx) (andT xy yy)))
andCrumb = andBits Boolean and
andNybble = andBits Crumb andCrumb
andByte = andBits Nybble andNybble
andPlayte = andBits Byte andByte
andDynner = andBits Playte andPlayte

notBits = t:* ⇒ notT:(x:t → t) ⇒ x:Pair t t ⇒ Pair t t ~
	x (Pair t t) (xx:t ⇒ xy:t ⇒ P t t (notT xx) (notT xy))
notCrumb = notBits Boolean not
notNybble = notBits Crumb notCrumb
notByte = notBits Nybble notNybble
notPlayte = notBits Byte notByte
notDynner = notBits Playte notPlayte

List = t:* ⇒ r:* → nil:r → cons:(x:t → xs:List t → r) → r
Nil = t:* ⇒ r:* ⇒ nil:r ⇒ cons:(x:t → xs:List t → r) ⇒ r ~
	nil
Cons = t:* ⇒ x:t ⇒ xs:List t ⇒ r:* ⇒ nil:r ⇒ cons:(x:t → xs:List t → r) ⇒ r ~
	cons x xs

concat = t:* ⇒ xs:List t ⇒ ys:List t ⇒ List t ~
	xs (List t) ys (x': t ⇒ xs':List t ⇒ Cons t x' (concat t xs' ys))
length = t:* ⇒ xs:List t ⇒ Natural ~
	xs Natural Zero (t ⇒ xs':List t ⇒ Succ (length t xs'))
index = t:* ⇒ xs:List t ⇒ n:Natural ⇒ Maybe t ~
	xs (Maybe t) (Nothing t) (x:t ⇒ xs':List t ⇒ n (Maybe t) (Just t x) (index t xs'))
indexWhere = t:* ⇒ pred:(x:t → Boolean) ⇒ xs:List t ⇒ Maybe Natural ~
	xs (Maybe Natural) (Nothing Natural) (x':t ⇒ xs':List t ⇒ (pred x') (Maybe Natural) (Just Natural Zero) (mapMaybe Natural Natural Succ (indexWhere t pred xs') id))
indexOf = t:* ⇒ eqT:Eq t ⇒ x:t ⇒ xs:List t ⇒ Maybe Natural ~
  indexWhere t (y:t ⇒ eqT x y id) xs

eqList = t:* ⇒ eqT:Eq t ⇒ Eq (List t) ~
  xs:List t ⇒ ys:List t ⇒ Unit ⇒ Boolean ~
	xs Boolean (ys Boolean True (t ⇒ List t ⇒ False))
	(x':t ⇒ xs':List t ⇒ ys Boolean False (y':t ⇒ ys':List t ⇒ and (eqT x' y' id) (eqList t eqT xs' ys' id)))
ordList = t:* ⇒ ordT:Ord t ⇒ Ord (List t) ~
	xs:List t ⇒ ys:List t ⇒ Unit ⇒ Ordering ~
	xs Ordering (ys Ordering EQ (t ⇒ List t ⇒ LT))
	            (x':t ⇒ xs':List t ⇒ ys Ordering GT (y':t ⇒ ys':List t ⇒ chainOrder (ordT x' y' id) (ordList t ordT xs' ys' id)))
mapList = Map List ~
	t:* ⇒ s:* ⇒ f:(a:t→s) ⇒ xs:List t ⇒ Unit ⇒ List s ~
	xs (List s) (Nil s) (x:t ⇒ xs':List t ⇒ Cons s (f x) (mapList t s f xs' id))
filterList = Filter List ~
	t:* ⇒ pred:(a:t→Boolean) ⇒ filter' = xs:List t ⇒ Unit ⇒ List t ~
  xs (List t) (Nil t)
	   (x':t ⇒ xs':List t ⇒ (ys':List t ⇒ (pred x') (List t) ys' (Cons t x' ys'))
                          (filter' xs' id))

Char = Pair Byte Playte
ZeroC = P Byte Playte 0b 0p
char16 = a:Nybble ⇒ b:Nybble ⇒ c:Nybble ⇒ d:Nybble ⇒ Char ~
	P Byte Playte 0b (playte (byte a b) (byte c d))
char8 = a:Nybble ⇒ b:Nybble ⇒ Char ~
	P Byte Playte 0b (playte 0b (byte a b))

tabC = char8 $0 $9
nlC = char8 $0 $a
spaceC = char8 $2 $0
parC = char8 $2 $8
renC = char8 $2 $9
asteriskC = char8 $2 $a
bangC = char8 $3 $3
colonC = char8 $3 $a
equalC = char8 $3 $d
queryC = char8 $3 $f
atC = char8 $4 $0
tildeC = char8 $7 $e
leftArrowC = char16 $2 $1 $9 $2
leftDoubleArrowC = char16 $2 $1 $d $2

String = List Char
NilS = Nil Char
ConsS = Cons Char
concatS = concat Char
charAt = index Char
idStr = str:String ⇒ str

StringBuilder = str:String → String
build = builder:StringBuilder ⇒ builder NilS
chrSB = ch:Char ⇒ StringBuilder ~
	str:String ⇒ ConsS ch str
strSB = s:String ⇒ StringBuilder ~
	str:String ⇒ concatS s str
chrSB+ = ch:Char ⇒ builder:StringBuilder ⇒ StringBuilder ~
	str:String ⇒ ConsS ch (builder str)
strSB+ = s:String ⇒ builder:StringBuilder ⇒ StringBuilder ~
	str:String ⇒ concatS s (builder str)
sb+ = leftBuilder:StringBuilder ⇒ rightBuilder:StringBuilder ⇒ StringBuilder ~
	str:String ⇒ leftBuilder (rightBuilder str)

TreeHash = r:* → th:(a:Dynner → b:Dynner → c:Dynner → d:Dynner → e:Dynner → f:Dynner → g:Dynner → h:Dynner → r) → r
TH = a:Dynner ⇒ b:Dynner ⇒ c:Dynner ⇒ d:Dynner ⇒ e:Dynner ⇒ f:Dynner ⇒ g:Dynner ⇒ h:Dynner ⇒ TreeHash ~
	r:* ⇒ th:(a:Dynner → b:Dynner → c:Dynner → d:Dynner → e:Dynner → f:Dynner → g:Dynner → h:Dynner → r) ⇒ r ~
	th a b c d e f g h

zeroTH = TH 0d 0d 0d 0d 0d 0d 0d 0d

Expression = r:* →
	star:r →
	hole:(hnm:String → r) →
	ref:(n:Natural → r) →
	rec:(n:Natural → r) →
	hash:(hash:TreeHash → name:String → r) →
	forall:(inType:Expression → outType:Expression → name:String → boundName:String → r) →
	lambda:(inType:Expression → body:Expression → name:String → boundName:String → r) →
	apply:(function:Expression → argument:Expression → name:String → r) →
	type:(outType:Expression → body:Expression → name:String → r) →
	r

Star = r:* ⇒
	star:r ⇒
	hole:(hnm:String → r) ⇒
	ref:(n:Natural → r) ⇒
	rec:(n:Natural → r) ⇒
	hash:(hash:TreeHash → name:String → r) ⇒
	forall:(inType:Expression → outType:Expression → name:String → boundName:String → r) ⇒
	lambda:(inType:Expression → body:Expression → name:String → boundName:String → r) ⇒
	apply:(function:Expression → argument:Expression → name:String → r) ⇒
	type:(outType:Expression → body:Expression → name:String → r) ⇒
	star

Hole = holeName:String ⇒ r:* ⇒
	star:r ⇒
	hole:(hnm:String → r) ⇒
	ref:(n:Natural → r) ⇒
	rec:(n:Natural → r) ⇒
	hash:(hash:TreeHash → name:String → r) ⇒
	forall:(inType:Expression → outType:Expression → name:String → boundName:String → r) ⇒
	lambda:(inType:Expression → body:Expression → name:String → boundName:String → r) ⇒
	apply:(function:Expression → argument:Expression → name:String → r) ⇒
	type:(outType:Expression → body:Expression → name:String → r) ⇒
	hole holeName

Ref = n:Natural ⇒
	r:* ⇒
	star:r ⇒
	hole:(hnm:String → r) ⇒
	ref:(n:Natural → r) ⇒
	rec:(n:Natural → r) ⇒
	hash:(hash:TreeHash → name:String → r) ⇒
	forall:(inType:Expression → outType:Expression → name:String → boundName:String → r) ⇒
	lambda:(inType:Expression → body:Expression → name:String → boundName:String → r) ⇒
	apply:(function:Expression → argument:Expression → name:String → r) ⇒
	type:(outType:Expression → body:Expression → name:String → r) ⇒
	ref n

Rec = n:Natural ⇒
	r:* ⇒
	star:r ⇒
	hole:(hnm:String → r) ⇒
	ref:(n:Natural → r) ⇒
	rec:(n:Natural → r) ⇒
	hash:(hash:TreeHash → name:String → r) ⇒
	forall:(inType:Expression → outType:Expression → name:String → boundName:String → r) ⇒
	lambda:(inType:Expression → body:Expression → name:String → boundName:String → r) ⇒
	apply:(function:Expression → argument:Expression → name:String → r) ⇒
	type:(outType:Expression → body:Expression → name:String → r) ⇒
	rec n

Hash = value:TreeHash ⇒
	name:String ⇒
	r:* ⇒
	star:r ⇒
	hole:(hnm:String → r) ⇒
	ref:(n:Natural → r) ⇒
	rec:(n:Natural → r) ⇒
	hash:(hash:TreeHash → name:String → r) ⇒
	forall:(inType:Expression → outType:Expression → name:String → boundName:String → r) ⇒
	lambda:(inType:Expression → body:Expression → name:String → boundName:String → r) ⇒
	apply:(function:Expression → argument:Expression → name:String → r) ⇒
	type:(outType:Expression → body:Expression → name:String → r) ⇒
	hash value name

Forall = inType:Expression ⇒
	outType:Expression ⇒
	name:String ⇒
	boundName:String ⇒
	r:* ⇒
	star:r ⇒
	hole:(hnm:String → r) ⇒
	ref:(n:Natural → r) ⇒
	rec:(n:Natural → r) ⇒
	hash:(hash:TreeHash → name:String → r) ⇒
	forall:(inType:Expression → outType:Expression → name:String → boundName:String → r) ⇒
	lambda:(inType:Expression → body:Expression → name:String → boundName:String → r) ⇒
	apply:(function:Expression → argument:Expression → name:String → r) ⇒
	type:(outType:Expression → body:Expression → name:String → r) ⇒
	forall inType outType name boundName

Lambda = inType:Expression ⇒
	body:Expression ⇒
	name:String ⇒
	boundName:String ⇒
	r:* ⇒
	star:r ⇒
	hole:(hnm:String → r) ⇒
	ref:(n:Natural → r) ⇒
	rec:(n:Natural → r) ⇒
	hash:(hash:TreeHash → name:String → r) ⇒
	forall:(inType:Expression → outType:Expression → name:String → boundName:String → r) ⇒
	lambda:(inType:Expression → body:Expression → name:String → boundName:String → r) ⇒
	apply:(function:Expression → argument:Expression → name:String → r) ⇒
	type:(outType:Expression → body:Expression → name:String → r) ⇒
	lambda inType body name boundName

Apply = function:Expression ⇒
	argument:Expression ⇒
	name:String ⇒
	r:* ⇒
	star:r ⇒
	hole:(hnm:String → r) ⇒
	ref:(n:Natural → r) ⇒
	rec:(n:Natural → r) ⇒
	hash:(hash:TreeHash → name:String → r) ⇒
	forall:(inType:Expression → outType:Expression → name:String → boundName:String → r) ⇒
	lambda:(inType:Expression → body:Expression → name:String → boundName:String → r) ⇒
	apply:(function:Expression → argument:Expression → name:String → r) ⇒
	type:(outType:Expression → body:Expression → name:String → r) ⇒
	apply function argument name

Type = outType:Expression ⇒
	body:Expression ⇒
	name:String ⇒
	r:* ⇒
	star:r ⇒
	hole:(hnm:String → r) ⇒
	ref:(n:Natural → r) ⇒
	rec:(n:Natural → r) ⇒
	hash:(hash:TreeHash → name:String → r) ⇒
	forall:(inType:Expression → outType:Expression → name:String → boundName:String → r) ⇒
	lambda:(inType:Expression → body:Expression → name:String → boundName:String → r) ⇒
	apply:(function:Expression → argument:Expression → name:String → r) ⇒
	type:(outType:Expression → body:Expression → name:String → r) ⇒
	type outType body name

Context = List Expression
NilContext = Nil Expression
ConsContext = Cons Expression

foldExpressionContextExpression = r:* ⇒
	star:(ctx:Context → r) ⇒
	hole:(ctx:Context → hnm:String → r) ⇒
	ref:(ctx:Context → n:Natural → r) ⇒
	rec:(ctx:Context → n:Natural → r) ⇒
	hash:(ctx:Context → hash:TreeHash → name:String → r) ⇒
	forall:(ctx:Context → inType':r → outType':r → inType:Expression → outType:Expression → name:String → boundName:String → r) ⇒
	lambda:(ctx:Context → inType':r → body':r → inType:Expression → body:Expression → name:String → boundName:String → r) ⇒
	apply:(ctx:Context → function':r → argument':r → function:Expression → argument:Expression → name:String → r) ⇒
	type:(ctx:Context → outType':r → body':r → outType:Expression → body:Expression → name:String → r) ⇒
	outer = ctx:Context ⇒
	inner = expr:Expression ⇒
	r ~
	expr r (star ctx) (hole ctx) (ref ctx) (rec ctx) (hash ctx)
		(inType:Expression ⇒ outType:Expression ⇒ forall ctx (inner inType) (outer (ConsContext expr ctx) outType) inType outType)
		(inType:Expression ⇒ body:Expression ⇒ lambda ctx (inner inType) (outer (ConsContext expr ctx) body) inType body)
		(function:Expression ⇒ argument:Expression ⇒ apply ctx (inner function) (inner argument) function argument)
		(outType:Expression ⇒ body:Expression ⇒ type ctx (inner outType) (inner body) outType body)

foldExpressionContext = r:* ⇒
	star:(ctx:Context → r) ⇒
	hole:(ctx:Context → hnm:String → r) ⇒
	ref:(ctx:Context → n:Natural → r) ⇒
	rec:(ctx:Context → n:Natural → r) ⇒
	hash:(ctx:Context → hash:TreeHash → name:String → r) ⇒
	forall:(ctx:Context → inType':r → outType':r → name:String → boundName:String → r) ⇒
	lambda:(ctx:Context → inType':r → body':r → name:String → boundName:String → r) ⇒
	apply:(ctx:Context → function':r → argument':r → name:String → r) ⇒
	type:(ctx:Context → outType':r → body':r → name:String → r) ⇒
	outer = ctx:Context ⇒
	inner = expr:Expression ⇒
	r ~
	expr r (star ctx) (hole ctx) (ref ctx) (rec ctx) (hash ctx)
		(inType:Expression ⇒ outType:Expression ⇒ forall ctx (inner inType) (outer (ConsContext expr ctx) outType))
		(inType:Expression ⇒ body:Expression ⇒ lambda ctx (inner inType) (outer (ConsContext expr ctx) body))
		(function:Expression ⇒ argument:Expression ⇒ apply ctx (inner function) (inner argument))
		(outType:Expression ⇒ body:Expression ⇒ type ctx (inner outType) (inner body))

shift = push:(Natural→Natural) ⇒ (Expression → Expression) ~
	foldExpressionContext Expression (Context⇒Star) (Context⇒Hole)
	(ctx:Context ⇒ n:Natural ⇒ Ref ((ordNatural (length Expression ctx) n id) Natural n n (push n)))
	(ctx:Context ⇒ n:Natural ⇒ Rec ((ordNatural (length Expression ctx) n id) Natural n n (push n)))
	(Context⇒Hash) (Context⇒Forall) (Context⇒Lambda) (Context⇒Apply) (Context⇒Type) NilContext

replace = ref:Expression ⇒ rec:Expression ⇒ expr:Expression ⇒ Expression ~
	shift precNaturalZ (foldExpressionContext Expression (Context⇒Star) (Context⇒Hole)
	(ctx:Context ⇒ n:Natural ⇒ (eqNatural (length Expression ctx) n id) Expression (shift (addNatural (Succ (length Expression ctx))) ref) (Ref n))
	(ctx:Context ⇒ n:Natural ⇒ (eqNatural (length Expression ctx) n id) Expression (shift (addNatural (Succ (length Expression ctx))) rec) (Rec n))
	(Context⇒Hash) (Context⇒Forall) (Context⇒Lambda) (Context⇒Apply) (Context⇒Type) NilContext expr)

applicate = hashExpr:(TreeHash → Maybe Expression) ⇒ expr:Expression ⇒ Expression ~
  expr Expression Star Hole Ref Rec
	  (hash:TreeHash ⇒ name:String ⇒ hashExpr hash Expression (Hash hash name) (id Expression))
    Forall Lambda
    (function:Expression ⇒ argument:Expression ⇒ name:String ⇒ (func':Expression ⇒ (repl:Expression ⇒ func' Expression
      repl (String ⇒ repl) (Natural ⇒ repl) (Natural ⇒ repl) (TreeHash ⇒ String ⇒ repl) (Expression ⇒ Expression ⇒ String ⇒ String ⇒ repl)
			(Expression ⇒ body:Expression ⇒ String ⇒ String ⇒ applicate hashExpr (replace argument func' body))
			(Expression ⇒ Expression ⇒ String ⇒ repl)
			(Expression ⇒ Expression ⇒ String ⇒ repl)
			) (Apply func' argument name)) (applicate hashExpr function))
		(Expression ⇒ body:Expression ⇒ String ⇒ applicate hashExpr body)

reduce = expr:Expression ⇒ Expression ~
	foldExpressionContext Expression (Context⇒Star) (Context⇒Hole) (Context⇒Ref) (Context⇒Rec) (Context⇒Hash) (Context⇒Forall) (Context⇒Lambda)
	(Context ⇒ function:Expression ⇒ argument:Expression ⇒ name:String ⇒
	  (repl:Expression ⇒ function Expression repl (String⇒repl) (Natural⇒repl) (Natural⇒repl) (TreeHash⇒String⇒repl) (Expression⇒Expression⇒String⇒String⇒repl)
		  (Expression ⇒ body:Expression ⇒ String ⇒ String ⇒ reduce (replace argument function body))
		  (Expression ⇒ Expression ⇒ String ⇒ repl) (Expression ⇒ Expression ⇒ String ⇒ repl)
		) (Apply function argument name)
	)
	(Context⇒Type) NilContext expr

nameOf = expr:Expression ⇒ String ~
	expr String
		NilS
		(String ⇒ NilS)
		(Natural ⇒ NilS)
		(Natural ⇒ NilS)
		(TreeHash ⇒ nm:String ⇒ nm)
	  (Expression ⇒ Expression ⇒ String ⇒ nm:String ⇒ nm)
	  (Expression ⇒ Expression ⇒ String ⇒ nm:String ⇒ nm)
	  (Expression ⇒ Expression ⇒ nm:String ⇒ nm)
	  (Expression ⇒ Expression ⇒ nm:String ⇒ nm)

boundNameOf = expr:Expression ⇒ String ~
	expr String
		NilS
		(String ⇒ NilS)
		(Natural ⇒ NilS)
		(Natural ⇒ NilS)
		(TreeHash ⇒ String ⇒ NilS)
	  (Expression ⇒ Expression ⇒ bnm:String ⇒ String ⇒ bnm)
	  (Expression ⇒ Expression ⇒ bnm:String ⇒ String ⇒ bnm)
	  (Expression ⇒ Expression ⇒ String ⇒ NilS)
	  (Expression ⇒ Expression ⇒ String ⇒ NilS)

inTypeOf = expr:Expression ⇒ Expression ~
	expr Expression
		(Hole NilS)
		(String ⇒ Hole NilS)
		(Natural ⇒ Hole NilS)
		(Natural ⇒ Hole NilS)
		(TreeHash ⇒ String ⇒ Hole NilS)
	  (inType:Expression ⇒ Expression ⇒ String ⇒ String ⇒ inType)
	  (inType:Expression ⇒ Expression ⇒ String ⇒ String ⇒ inType)
	  (Expression ⇒ Expression ⇒ String ⇒ Hole NilS)
	  (Expression ⇒ Expression ⇒ String ⇒ Hole NilS)

closed = (closed' = depth:Natural ⇒ expr:Expression ⇒ Boolean ~ expr Boolean
		True
		(String ⇒ False)
		(n:Natural ⇒ > Natural ordNatural depth n)
		(n:Natural ⇒ > Natural ordNatural depth n)
		(TreeHash ⇒ String ⇒ True)
	  (inType:Expression ⇒ outType:Expression ⇒ String ⇒ String ⇒ and (closed' depth inType) (closed' (Succ depth) outType))
	  (inType:Expression ⇒ body:Expression ⇒ String ⇒ String ⇒ and (closed' depth inType) (closed' (Succ depth) body))
	  (function:Expression ⇒ argument:Expression ⇒ String ⇒ and (closed' depth function) (closed' depth argument))
	  (outType:Expression ⇒ body:Expression ⇒ String ⇒ and (closed' depth outType) (closed' depth body))
	) Zero

showNameSep = sep:String ⇒ name:String ⇒ String ~
	name String NilS (Char ⇒ String ⇒ concatS name sep)

showName = showNameSep (ConsS spaceC (ConsS equalC (ConsS spaceC NilS)))
showBoundName = showNameSep (ConsS spaceC (ConsS colonC (ConsS spaceC NilS)))
showNames = name:String ⇒ boundName:String ⇒ concatS (showName name) (showBoundName boundName)

parenLevel = expr:Expression ⇒ expr Natural
	9
	(String ⇒ 9)
	(Natural ⇒ 9)
	(Natural ⇒ 9)
	(TreeHash ⇒ String ⇒ 9)
	(Expression ⇒ Expression ⇒ String ⇒ String ⇒ 5)
	(Expression ⇒ Expression ⇒ String ⇒ String ⇒ 5)
	(Expression ⇒ Expression ⇒ String ⇒ 8)
	(Expression ⇒ Expression ⇒ String ⇒ 5)

paren = if:Boolean ⇒ str:String ⇒ StringBuilder ~
	if StringBuilder (chrSB+ parC (strSB+ str (chrSB renC))) (id String)
